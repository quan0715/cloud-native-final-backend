name: Deploy Template

on:
  workflow_call:
    inputs:
      branch:
        description: "The branch being deployed"
        required: true
        type: string
      tag:
        description: "Docker image tag"
        required: true
        type: string
      image_name:
        description: "Full Docker image name (e.g., ghcr.io/owner/repo)"
        required: true
        type: string
    secrets:
      deploy_host:
        description: "Deployment host (EC2 IP or domain)"
        required: true
      ec2_user:
        description: "EC2 SSH username"
        required: true
      ec2_ssh_key:
        description: "EC2 SSH private key"
        required: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ inputs.image_name }}:${{ inputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.deploy_host }}
          username: ${{ secrets.ec2_user }}
          key: ${{ secrets.ec2_ssh_key }}
          script: |
            set -e
            echo "🔑 Logged in as $(whoami) on host $(hostname)"
            echo "🚀 Starting deployment for image: ${{ inputs.image_name }}:${{ inputs.tag }}"

            # Navigate to your app directory on the EC2 instance if docker-compose.yml is not in the home directory
            # Example: cd /srv/my-app || exit 1

            echo "🐳 Pulling Docker image: ${{ inputs.image_name }}:${{ inputs.tag }}"
            # Ensure your docker-compose.yml on EC2 uses this specific image and tag,
            # or that it's configured to pick up the latest pulled image for the service.
            # Using environment variables in docker-compose.yml for the tag is a good practice.
            sudo docker pull ${{ inputs.image_name }}:${{ inputs.tag }}

            echo "🔄 Restarting services with Docker Compose"
            # Specify your backend service name if you don't want to restart everything (e.g., database)
            # Example: sudo docker compose up -d --remove-orphans --force-recreate your_backend_service_name
            # Assuming docker-compose.yml is in the current directory after cd (if any)
            # Or provide the full path: sudo docker compose -f /path/to/your/docker-compose.yml up ...
            sudo docker compose up -d --remove-orphans --force-recreate # Be cautious if this restarts databases

            if sudo systemctl status cloudflared &> /dev/null; then
              echo "🔄 Restarting cloudflared service"
              sudo systemctl restart cloudflared
            else
              echo "⚠️ cloudflared service not found or not active, skipping restart."
            fi

            echo "✅ Deployment finished successfully!"
