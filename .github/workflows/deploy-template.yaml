name: Deploy Template

on:
  workflow_call:
    inputs:
      branch:
        description: "The branch being deployed"
        required: true
        type: string
      tag:
        description: "Docker image tag"
        required: true
        type: string
      image_name:
        description: "Full Docker image name (e.g., ghcr.io/owner/repo)"
        required: true
        type: string
    secrets:
      deploy_host:
        description: "Deployment host (EC2 IP or domain)"
        required: true
      ec2_user:
        description: "EC2 SSH username"
        required: true
      ec2_ssh_key:
        description: "EC2 SSH private key"
        required: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ inputs.image_name }}:${{ inputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Sync configuration files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.deploy_host }}
          username: ${{ secrets.ec2_user }}
          key: ${{ secrets.ec2_ssh_key }}
          source: "docker-compose.yml,observability/"
          target: "~/app/"
          strip_components: 0

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.deploy_host }}
          username: ${{ secrets.ec2_user }}
          key: ${{ secrets.ec2_ssh_key }}
          script: |
            set -e
            echo "🔑 Logged in as $(whoami) on host $(hostname)"
            echo "🚀 Starting deployment for image: ${{ inputs.image_name }}:${{ inputs.tag }}"

            # Navigate to your app directory (adjust path as needed)
            cd ~/app || { echo "❌ App directory not found"; exit 1; }

            # Verify configuration files are synced
            echo "📁 Verifying configuration files"
            ls -la docker-compose.yml
            ls -la observability/

            # Login to GitHub Container Registry to pull private images
            echo "🔐 Logging into GitHub Container Registry"
            echo "${{ secrets.GITHUB_TOKEN }}" | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Gracefully stop only the backend service
            echo "⏹️ Stopping backend service"
            sudo docker compose stop backend || echo "⚠️ Backend service was not running"

            # Remove the old backend container to ensure new image is used
            echo "🗑️ Removing old backend container"
            sudo docker compose rm -f backend || echo "⚠️ No backend container to remove"

            # Start the backend service with new image (Docker Compose will pull automatically)
            echo "🚀 Starting backend service with new image"
            sudo docker compose up -d --pull always backend

            # Clean up old images to save disk space
            echo "🧹 Cleaning up old Docker images"
            sudo docker image prune -f

            # Restart cloudflared if it exists
            if sudo systemctl status cloudflared &> /dev/null; then
              echo "🔄 Restarting cloudflared service"
              sudo systemctl restart cloudflared
            else
              echo "ℹ️ Cloudflared service not found, skipping restart"
            fi

            # Final status check
            echo "📊 Deployment status:"
            sudo docker compose ps

            echo "✅ Deployment completed successfully!"
